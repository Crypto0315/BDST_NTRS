package com.aizone.blockchain.wallet;import com.aizone.blockchain.db.DBAccess;import com.aizone.blockchain.encrypt.WalletUtils;import com.aizone.blockchain.event.NewAccountEvent;import com.aizone.blockchain.net.ApplicationContextProvider;import com.google.common.base.Optional;import com.mathworks.toolbox.javabuilder.MWNumericArray;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;import java.math.BigDecimal;import java.security.KeyPair;import java.util.List;import java.util.Map;/** * 账户控制工具类, 锁定，解锁等操作 * @since 24-6-6 */@Componentpublic class Personal {    @Autowired    private DBAccess dbAccess;    /**     * 创建一个默认账户     * @return     */	/*public Account newAccount() throws Exception {		KeyPair keyPair = WalletUtils.generateKeyPair();		Account account = new Account(keyPair.getPublic().getEncoded());		//不存储私钥		dbAccess.putAccount(account);		//发布同步账号事件		ApplicationContextProvider.publishEvent(new NewAccountEvent(account));		account.setPrivateKey(WalletUtils.privateKeyToString(keyPair.getPrivate()));		//如果没有发现挖矿账号, 则优先创建挖矿账号		Optional<Account> coinBaseAccount = dbAccess.getCoinBaseAccount();		if (!coinBaseAccount.isPresent()) {			dbAccess.putCoinBaseAccount(account);		}		return account;	}*/    /**     * 创建一个默认账户     * @return     */    public Account newNTRSAccount() throws Exception {        List<Object> setup = WalletUtils.generateSetup();        Map<String, Object[]> stringMap = WalletUtils.generateKeyGen(setup);        Long n = (Long) setup.get(0);        Long m = (Long) setup.get(1);        Long d = (Long) setup.get(2);        Double q = (Double) setup.get(3);        double[][] A = (double[][]) setup.get(4);        double[][] f = (double[][]) setup.get(5);        Object[] ntrsKeyGen = stringMap.get("ntrsKeyGen");        double[][] SK = (double[][]) ((MWNumericArray) ntrsKeyGen[0]).toDoubleArray();        double[][] PK = (double[][]) ((MWNumericArray) ntrsKeyGen[1]).toDoubleArray();        Account account = new Account(PK,n,m,d,q,A,f);        //不存储私钥        dbAccess.putAccount(account);        //发布同步账号事件        ApplicationContextProvider.publishEvent(new NewAccountEvent(account));        account.setPrivateKey(WalletUtils.encodeObjectToBase58(SK));        return account;    }    /**     * 创建挖矿账号     * @return     */    public Account createCoinBase() throws Exception {        List<Object> setup = WalletUtils.generateSetup();        Map<String, Object[]> stringMap = WalletUtils.generateKeyGen(setup);        Long n = (Long) setup.get(0);        Long m = (Long) setup.get(1);        Long d = (Long) setup.get(2);        Double q = (Double) setup.get(3);        double[][] A = (double[][]) setup.get(4);        double[][] f = (double[][]) setup.get(5);        Object[] ntrsKeyGen = stringMap.get("ntrsKeyGen");        double[][] SK = (double[][]) ((MWNumericArray) ntrsKeyGen[0]).toDoubleArray();        double[][] PK = (double[][]) ((MWNumericArray) ntrsKeyGen[1]).toDoubleArray();        Account account = new Account(PK,n,m,d,q,A,f);        //发布同步账号事件        ApplicationContextProvider.publishEvent(new NewAccountEvent(account));        account.setPrivateKey(WalletUtils.encodeObjectToBase58(SK));        //如果没有发现挖矿账号, 则优先创建挖矿账号        dbAccess.putCoinBaseAccount(account);        return account;    }}